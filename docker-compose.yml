

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - monitor-net

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "29092"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - monitor-net

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka2
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    ports:
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "29093"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - monitor-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka1
      - kafka2
    ports:
      - "8780:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: iot-broker-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - monitor-net

  postgresql:
    image: postgres:15
    container_name: postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgresiot -d iot_data"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - monitor-net

  sensor-a-producer:
    build:
      context: ./producer
    container_name: sensor-a-producer
    command: ["python", "iot_sensor_producer.py", "--machine", "sensor_A"]
    depends_on:
      kafka1:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./data:/app/data
      - ./config:/config
    restart: on-failure
    networks:
      - monitor-net


  sensor-b-producer:
    build:
      context: ./producer
    container_name: sensor-b-producer
    command: ["python", "iot_sensor_producer.py", "--machine", "sensor_B"]
    depends_on:
      kafka1:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./data:/app/data
      - ./config:/config
    restart: on-failure
    networks:
      - monitor-net

  # #Load Test용
  # loadtest_producer:
  #   build:
  #     context: ./producer
  #   container_name: load_test_producer
  #   command: ["python", "kafka_load_producer.py"]
  #   depends_on:
  #     kafka1:
  #       condition: service_healthy
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #   volumes:
  #     - ./data:/app/data
  #     - ./config:/config
  #   restart: on-failure
  #   networks:
  #     - monitor-net

  processor:
    build:
      context: ./processor
    container_name: iot-processor
    depends_on:
      kafka1:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./config:/config
    restart: on-failure
    command: ["python", "iot_data_processor.py"]
    networks:
      - monitor-net

  spark-master:
    build:
      context: ./spark
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "9577:7077"
      - "9585:8080"
    volumes:
      - ./spark:/opt/spark-apps  # calculate_anomaly_range.py 위치
      - ./spark/jars:/opt/spark/jars
      - ./config:/opt/spark-apps/config
    networks:
      - monitor-net

  spark-worker:
    build:
      context: ./spark
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8082:8080"
    volumes:
      - ./spark:/opt/spark-apps
      - ./spark/jars:/opt/spark/jars
      - ./config:/opt/spark-apps/config
    networks:
      - monitor-net
    

  airflow-webserver:
    build:
      context: ./airflow
    container_name: airflow-webserver
    depends_on:
      - postgresql
      - kafka1
      - spark-master
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql/${POSTGRES_DB}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
      - TZ=${TZ}
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./spark:/opt/airflow/dags/scripts
      - ./spark/jars:/opt/spark/jars
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config:/opt/airflow/config
    command:  ["airflow", "webserver"]
    networks:
      - monitor-net

  airflow-scheduler:
    build:
      context: ./airflow
    container_name: airflow-scheduler
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql/${POSTGRES_DB}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
      - TZ=${TZ}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./spark:/opt/airflow/dags/scripts
      - ./spark/jars:/opt/spark/jars
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config:/opt/airflow/config
    command: ["airflow", "scheduler"]
    networks:
      - monitor-net

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    depends_on:
      kafka1:
        condition: service_healthy
    command:
      - "--kafka.server=kafka1:29092"
      - "--kafka.server=kafka2:29093"
    environment:
      KAFKA_SERVER: kafka1:29092,kafka2:29093
      KAFKA_BROKERCONNECT: kafka1:29092,kafka2:29093
      KAFKA_VERSION: "2.8.0"
    restart: always
    networks:
      - monitor-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - kafka-exporter
    restart: always
    networks:
      - monitor-net  

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: always
    networks:
      - monitor-net
    env_file:
      - .env
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.36.0
    container_name: cadvisor
    ports:
      - "8089:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command:
      - "--docker_only=true"
      - "--store_container_labels=true"
      - "--whitelisted_container_labels=com.docker.compose.service,name"
    restart: always
    networks:
      - monitor-net  


volumes:
  pgdata:
  grafana-storage:

networks:
  monitor-net:      
    driver: bridge