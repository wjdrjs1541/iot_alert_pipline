{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "type": "dashboard",
        "name": "Annotations & Alerts",
        "hide": true,
        "enable": true,
        "iconColor": "rgba(0, 211, 255, 1)"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1712000000001,
  "refresh": "10s",
  "schemaVersion": 30,
  "style": "dark",
  "tags": [
    "monitoring",
    "iot",
    "containers"
  ],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "timezone": "browser",
  "title": "IoT Dashboard",
  "uid": "iot-dashboard-grid",
  "version": 1,
  "panels": [
    {
      "type": "timeseries",
      "title": "Host CPU Usage per Core (%)",
      "datasource": "Prometheus",
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "targets": [
        {
          "expr": "rate(container_cpu_usage_seconds_total{id=\"/\"}[1m]) * 100",
          "legendFormat": "{{cpu}}",
          "refId": "A"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        }
      }
    },
    {
      "type": "timeseries",
      "title": "Host Memory Usage (MB)",
      "datasource": "Prometheus",
      "fieldConfig": {
        "defaults": {
          "unit": "megabytes",
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "targets": [
        {
          "expr": "container_memory_usage_bytes{id=\"/\"} / 1024 / 1024",
          "legendFormat": "Host Memory",
          "refId": "B"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        }
      }
    },
    {
      "type": "timeseries",
      "title": "Temperature with Anomalies - sensor_A",
      "datasource": "PostgreSQL",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": ".*\\(anomaly\\)$"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "points"
              },
              {
                "id": "custom.pointSize",
                "value": 4
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FF0000",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "^(?!.*\\(anomaly\\)).*"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.pointSize",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 20
      },
      "targets": [
        {
          "refId": "A",
          "rawSql": "SELECT sent_time AS \"time\", temperature AS value, machine_id FROM sensor_data WHERE machine_id = 'sensor_A' AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        },
        {
          "refId": "B",
          "rawSql": "SELECT sent_time AS \"time\", temperature AS value, machine_id || ' (anomaly)' AS metric FROM anomaly_log WHERE machine_id = 'sensor_A' AND temp_anomaly = true AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        },
        "connectNulls": true
      }
    },
    {
      "type": "timeseries",
      "title": "Humidity with Anomalies - sensor_A",
      "datasource": "PostgreSQL",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": ".*\\(anomaly\\)$"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "points"
              },
              {
                "id": "custom.pointSize",
                "value": 4
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FF0000",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "^(?!.*\\(anomaly\\)).*"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.pointSize",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 30
      },
      "targets": [
        {
          "refId": "A",
          "rawSql": "SELECT sent_time AS \"time\", humidity AS value, machine_id FROM sensor_data WHERE machine_id = 'sensor_A' AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        },
        {
          "refId": "B",
          "rawSql": "SELECT sent_time AS \"time\", humidity AS value, machine_id || ' (anomaly)' AS metric FROM anomaly_log WHERE machine_id = 'sensor_A' AND hum_anomaly = true AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        },
        "connectNulls": true
      }
    },
    {
      "type": "timeseries",
      "title": "Temperature with Anomalies - sensor_B",
      "datasource": "PostgreSQL",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": ".*\\(anomaly\\)$"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "points"
              },
              {
                "id": "custom.pointSize",
                "value": 4
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FF0000",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "^(?!.*\\(anomaly\\)).*"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.pointSize",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 40
      },
      "targets": [
        {
          "refId": "A",
          "rawSql": "SELECT sent_time AS \"time\", temperature AS value, machine_id FROM sensor_data WHERE machine_id = 'sensor_B' AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        },
        {
          "refId": "B",
          "rawSql": "SELECT sent_time AS \"time\", temperature AS value, machine_id || ' (anomaly)' AS metric FROM anomaly_log WHERE machine_id = 'sensor_B' AND temp_anomaly = true AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        },
        "connectNulls": true
      }
    },
    {
      "type": "timeseries",
      "title": "Humidity with Anomalies - sensor_B",
      "datasource": "PostgreSQL",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": ".*\\(anomaly\\)$"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "points"
              },
              {
                "id": "custom.pointSize",
                "value": 4
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FF0000",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "^(?!.*\\(anomaly\\)).*"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.pointSize",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 50
      },
      "targets": [
        {
          "refId": "A",
          "rawSql": "SELECT sent_time AS \"time\", humidity AS value, machine_id FROM sensor_data WHERE machine_id = 'sensor_B' AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        },
        {
          "refId": "B",
          "rawSql": "SELECT sent_time AS \"time\", humidity AS value, machine_id || ' (anomaly)' AS metric FROM anomaly_log WHERE machine_id = 'sensor_B' AND hum_anomaly = true AND $__timeFilter(sent_time) ORDER BY sent_time ASC",
          "format": "time_series"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        },
        "connectNulls": true
      }
    },
    {
      "type": "timeseries",
      "title": "Kafka Messages In (approx)",
      "datasource": "Prometheus",
      "fieldConfig": {
        "defaults": {
          "unit": "ops", 
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 0,
        "y": 20
      },
      "targets": [
        {
          "refId": "A",
          "expr": "sum by (topic) (rate(kafka_topic_partition_current_offset{topic!~'__.*'}[1m]))",
          "legendFormat": "Messages In - {{topic}}"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        },
        "connectNulls": true
      }
    },
    {
      "type": "timeseries",
      "title": "Kafka Consumer Lag",
      "datasource": "Prometheus",
      "fieldConfig": {
        "defaults": {
          "unit": "short", 
          "color": {
            "mode": "palette-classic"
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 0,
        "y": 30
      },
      "targets": [
        {
          "refId": "B",
          "expr": "kafka_consumergroup_lag",
          "legendFormat": "Lag - {{consumergroup}} / {{topic}}"
        }
      ],
      "options": {
        "legend": {
          "showLegend": true,
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        },
        "connectNulls": true
      }
    }



  ]
}